package dev.kamikaze.movike.presentation.navigationimport android.os.Bundleimport androidx.core.os.bundleOfimport androidx.navigation.NavControllerimport androidx.navigation.NavDestinationimport androidx.navigation.NavDirectionsimport androidx.navigation.NavOptionsimport androidx.navigation.fragment.NavHostFragmentimport androidx.navigation.ui.AppBarConfigurationimport androidx.navigation.ui.navigateUpimport androidx.navigation.ui.setupActionBarWithNavControllerimport dev.kamikaze.movike.Rimport dev.kamikaze.movike.presentation.navigation.navigators.FeedNavigatorimport dev.kamikaze.movike.presentation.navigation.navigators.SearchNavigatorimport dev.kamikaze.movike.presentation.ui.activity.SingleActivityimport dev.kamikaze.movike.presentation.ui.fragments.FeedFragmentDirectionsclass Navigator(        private val activity: SingleActivity) : FeedNavigator, SearchNavigator, NavController.OnDestinationChangedListener {        private var navBuilder = NavOptions.Builder()        private lateinit var navController: NavController        private val appBarConfiguration = AppBarConfiguration(            topLevelDestinationIds = setOf(R.id.feedFragment),            fallbackOnNavigateUpListener = { activity.onSupportNavigateUp() }    )        init {        initNavController()        navBuilder                .setEnterAnim(R.anim.slide_left)                .setExitAnim(R.anim.wait)                .setPopEnterAnim(R.anim.slide_left)                .setPopExitAnim(R.anim.wait)    }        override fun navigateUp() {        navController.navigateUp()    }        override fun goToDetailsMovie(movieId: Int) {        val value = Pair("movieId", movieId)        goToFragmentById(R.id.movieDetailsFragment, bundleOf(value))    }        override fun onDestinationChanged(controller: NavController, destination: NavDestination, bundle: Bundle?) {        when (destination.id) {            R.id.searchFragment, R.id.movieDetailsFragment -> {                activity.hideToolbar()            }            else -> {                activity.showToolbar()            }        }    }        internal fun supportNavigateUp(): Boolean {        return navController.navigateUp(appBarConfiguration)    }        private fun initNavController() {        val navHostFragment = activity.supportFragmentManager.findFragmentById(R.id.navHostFragment) as NavHostFragment        navController = navHostFragment.navController        navController.addOnDestinationChangedListener(this)        activity.setupActionBarWithNavController(navController, appBarConfiguration)    }        private fun goToFragmentById(id: Int, bundle: Bundle?) {        navController.navigate(id, bundle, navBuilder.build())    }        private fun goToFragmentById(id: Int) {        goToFragmentById(id, null)    }        private fun supportNavigateUp(action: NavDirections) {        navController.navigate(action)    }    }