package dev.kamikaze.movike.presentation.navigationimport android.os.Bundleimport androidx.appcompat.app.AppCompatActivityimport androidx.appcompat.widget.Toolbarimport androidx.core.os.bundleOfimport androidx.navigation.NavControllerimport androidx.navigation.NavDirectionsimport androidx.navigation.NavOptionsimport androidx.navigation.fragment.NavHostFragmentimport androidx.navigation.ui.AppBarConfigurationimport androidx.navigation.ui.navigateUpimport androidx.navigation.ui.setupActionBarWithNavControllerimport dev.kamikaze.movike.Rimport dev.kamikaze.movike.presentation.navigation.navigators.FeedNavigatorimport dev.kamikaze.movike.presentation.navigation.navigators.SearchNavigatorimport dev.kamikaze.movike.presentation.ui.fragments.FeedFragmentDirectionsclass Navigator(        private val activity: AppCompatActivity,        toolbar: Toolbar? = null) : FeedNavigator, SearchNavigator {        private lateinit var navController: NavController    private var navBuilder = NavOptions.Builder()        private val appBarConfiguration by lazy {        AppBarConfiguration(                topLevelDestinationIds = setOf(R.id.feedFragment),                fallbackOnNavigateUpListener = { activity.onSupportNavigateUp() }        )    }        init {        if (toolbar != null) {            supportToolbar(toolbar)        }        navBuilder                .setEnterAnim(R.anim.slide_left)                .setExitAnim(R.anim.wait)                .setPopEnterAnim(R.anim.slide_left)                .setPopExitAnim(R.anim.wait)    }        override fun navigateUp() {        navController.navigateUp()    }        override fun goToDetailsMovie(movieId: Int) {        val value = Pair("movieId", movieId)        goToFragmentById(R.id.movieDetailsFragment, bundleOf(value))    }        override fun goToSearchMovies() {        val action = FeedFragmentDirections.actionFeedFragmentToSearchDialog()        supportNavigateToolbar(action)    }        internal fun supportNavigateToolbar(): Boolean {        return navController.navigateUp(appBarConfiguration)    }        private fun goToFragmentById(id: Int, bundle: Bundle?) {        navController.navigate(id, bundle, navBuilder.build())    }        private fun goToFragmentById(id: Int) {        goToFragmentById(id, null)    }        private fun supportNavigateToolbar(action: NavDirections) {        navController.navigate(action)    }        private fun supportToolbar(toolbar: Toolbar) {        val navHostFragment = activity.supportFragmentManager.findFragmentById(R.id.navHostFragment) as NavHostFragment        navController = navHostFragment.navController        activity.apply {            setSupportActionBar(toolbar)            setupActionBarWithNavController(navController, appBarConfiguration)        }            }    }